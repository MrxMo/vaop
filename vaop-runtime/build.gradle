apply plugin: plugs.android.lib
apply plugin: plugs.aop

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {
        minSdkVersion versions.minSdk
        targetSdkVersion versions.compileSdk
        versionCode 101
        versionName "1.0.1"
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility versions.java
        targetCompatibility versions.java
    }
}

dependencies {
    compileOnly deps.support.v4
    compileOnly deps.support.annotations

    api project(":vaop-annotation")
}

apply from: https.jitpack

//import org.aspectj.bridge.IMessage
//import org.aspectj.bridge.MessageHandler
//import org.aspectj.tools.ajc.Main
//
//android.libraryVariants.all { variant ->
//    JavaCompile javaCompile = variant.javaCompile
//    javaCompile.doLast {
//        String[] args = [
//                "-showWeaveInfo",
//                "-1.5",
//                "-inpath", javaCompile.destinationDir.toString(),
//                "-aspectpath", javaCompile.classpath.asPath,
//                "-d", javaCompile.destinationDir.toString(),
//                "-classpath", javaCompile.classpath.asPath,
//                "-bootclasspath", android.bootClasspath.join(File.pathSeparator)
//        ]
//
//        MessageHandler handler = new MessageHandler(true);
//        new Main().run(args, handler)
//
//        def log = project.logger
//        for (IMessage message : handler.getMessages(null, true)) {
//            switch (message.getKind()) {
//                case IMessage.ABORT:
//                case IMessage.ERROR:
//                case IMessage.FAIL:
//                    log.error message.message, message.thrown
//                    break;
//                case IMessage.WARNING:
//                case IMessage.INFO:
//                    log.info message.message, message.thrown
//                    break;
//                case IMessage.DEBUG:
//                    log.debug message.message, message.thrown
//                    break;
//            }
//        }
//    }
//}